#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.LinqData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SchoolSysDB")]
	public partial class CampusDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExpense(Expense instance);
    partial void UpdateExpense(Expense instance);
    partial void DeleteExpense(Expense instance);
    partial void Insertfee(fee instance);
    partial void Updatefee(fee instance);
    partial void Deletefee(fee instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentAttendence(StudentAttendence instance);
    partial void UpdateStudentAttendence(StudentAttendence instance);
    partial void DeleteStudentAttendence(StudentAttendence instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTeacherAttendence(TeacherAttendence instance);
    partial void UpdateTeacherAttendence(TeacherAttendence instance);
    partial void DeleteTeacherAttendence(TeacherAttendence instance);
    partial void InsertTeacherSubject(TeacherSubject instance);
    partial void UpdateTeacherSubject(TeacherSubject instance);
    partial void DeleteTeacherSubject(TeacherSubject instance);
    #endregion
		
		public CampusDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CampusDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<Expense> Expenses
		{
			get
			{
				return this.GetTable<Expense>();
			}
		}
		
		public System.Data.Linq.Table<fee> fees
		{
			get
			{
				return this.GetTable<fee>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentAttendence> StudentAttendences
		{
			get
			{
				return this.GetTable<StudentAttendence>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TeacherAttendence> TeacherAttendences
		{
			get
			{
				return this.GetTable<TeacherAttendence>();
			}
		}
		
		public System.Data.Linq.Table<TeacherSubject> TeacherSubjects
		{
			get
			{
				return this.GetTable<TeacherSubject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private EntitySet<Exam> _Exams;
		
		private EntitySet<Expense> _Expenses;
		
		private EntitySet<fee> _fees;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<StudentAttendence> _StudentAttendences;
		
		private EntitySet<Subject> _Subjects;
		
		private EntitySet<TeacherSubject> _TeacherSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    #endregion
		
		public Class()
		{
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			this._Expenses = new EntitySet<Expense>(new Action<Expense>(this.attach_Expenses), new Action<Expense>(this.detach_Expenses));
			this._fees = new EntitySet<fee>(new Action<fee>(this.attach_fees), new Action<fee>(this.detach_fees));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._StudentAttendences = new EntitySet<StudentAttendence>(new Action<StudentAttendence>(this.attach_StudentAttendences), new Action<StudentAttendence>(this.detach_StudentAttendences));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Exam", Storage="_Exams", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Expense", Storage="_Expenses", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Expense> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_fee", Storage="_fees", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<fee> fees
		{
			get
			{
				return this._fees;
			}
			set
			{
				this._fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Students", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_StudentAttendence", Storage="_StudentAttendences", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<StudentAttendence> StudentAttendences
		{
			get
			{
				return this._StudentAttendences;
			}
			set
			{
				this._StudentAttendences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Subject", Storage="_Subjects", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherSubject", Storage="_TeacherSubjects", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<TeacherSubject> TeacherSubjects
		{
			get
			{
				return this._TeacherSubjects;
			}
			set
			{
				this._TeacherSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_fees(fee entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_StudentAttendences(StudentAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_StudentAttendences(StudentAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamID;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _SubjectID;
		
		private string _RollNo;
		
		private System.Nullable<int> _TotalMarks;
		
		private System.Nullable<int> _OutOfMarks;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIDChanging(int value);
    partial void OnExamIDChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnRollNoChanging(string value);
    partial void OnRollNoChanged();
    partial void OnTotalMarksChanging(System.Nullable<int> value);
    partial void OnTotalMarksChanged();
    partial void OnOutOfMarksChanging(System.Nullable<int> value);
    partial void OnOutOfMarksChanged();
    #endregion
		
		public Exam()
		{
			this._Class = default(EntityRef<Class>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNo", DbType="VarChar(20)")]
		public string RollNo
		{
			get
			{
				return this._RollNo;
			}
			set
			{
				if ((this._RollNo != value))
				{
					this.OnRollNoChanging(value);
					this.SendPropertyChanging();
					this._RollNo = value;
					this.SendPropertyChanged("RollNo");
					this.OnRollNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMarks", DbType="Int")]
		public System.Nullable<int> TotalMarks
		{
			get
			{
				return this._TotalMarks;
			}
			set
			{
				if ((this._TotalMarks != value))
				{
					this.OnTotalMarksChanging(value);
					this.SendPropertyChanging();
					this._TotalMarks = value;
					this.SendPropertyChanged("TotalMarks");
					this.OnTotalMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfMarks", DbType="Int")]
		public System.Nullable<int> OutOfMarks
		{
			get
			{
				return this._OutOfMarks;
			}
			set
			{
				if ((this._OutOfMarks != value))
				{
					this.OnOutOfMarksChanging(value);
					this.SendPropertyChanging();
					this._OutOfMarks = value;
					this.SendPropertyChanged("OutOfMarks");
					this.OnOutOfMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Exam", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Exam", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._SubjectID = value.SubjectId;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expense")]
	public partial class Expense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExpenseId;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _SubjectID;
		
		private System.Nullable<int> _ChargeAmount;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpenseIdChanging(int value);
    partial void OnExpenseIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnChargeAmountChanging(System.Nullable<int> value);
    partial void OnChargeAmountChanged();
    #endregion
		
		public Expense()
		{
			this._Class = default(EntityRef<Class>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExpenseId
		{
			get
			{
				return this._ExpenseId;
			}
			set
			{
				if ((this._ExpenseId != value))
				{
					this.OnExpenseIdChanging(value);
					this.SendPropertyChanging();
					this._ExpenseId = value;
					this.SendPropertyChanged("ExpenseId");
					this.OnExpenseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeAmount", DbType="Int")]
		public System.Nullable<int> ChargeAmount
		{
			get
			{
				return this._ChargeAmount;
			}
			set
			{
				if ((this._ChargeAmount != value))
				{
					this.OnChargeAmountChanging(value);
					this.SendPropertyChanging();
					this._ChargeAmount = value;
					this.SendPropertyChanged("ChargeAmount");
					this.OnChargeAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Expense", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Expense", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._SubjectID = value.SubjectId;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fees")]
	public partial class fee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeesId;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _FeesAmount;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeesIdChanging(int value);
    partial void OnFeesIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnFeesAmountChanging(System.Nullable<int> value);
    partial void OnFeesAmountChanged();
    #endregion
		
		public fee()
		{
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeesId
		{
			get
			{
				return this._FeesId;
			}
			set
			{
				if ((this._FeesId != value))
				{
					this.OnFeesIdChanging(value);
					this.SendPropertyChanging();
					this._FeesId = value;
					this.SendPropertyChanged("FeesId");
					this.OnFeesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeesAmount", DbType="Int")]
		public System.Nullable<int> FeesAmount
		{
			get
			{
				return this._FeesAmount;
			}
			set
			{
				if ((this._FeesAmount != value))
				{
					this.OnFeesAmountChanging(value);
					this.SendPropertyChanging();
					this._FeesAmount = value;
					this.SendPropertyChanged("FeesAmount");
					this.OnFeesAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_fee", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.fees.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.fees.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Gender;
		
		private System.Nullable<long> _Mobile;
		
		private string _RollNO;
		
		private string _Address;
		
		private System.Nullable<int> _ClassId;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnMobileChanging(System.Nullable<long> value);
    partial void OnMobileChanged();
    partial void OnRollNOChanging(string value);
    partial void OnRollNOChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    #endregion
		
		public Student()
		{
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="BigInt")]
		public System.Nullable<long> Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNO", DbType="VarChar(50)")]
		public string RollNO
		{
			get
			{
				return this._RollNO;
			}
			set
			{
				if ((this._RollNO != value))
				{
					this.OnRollNOChanging(value);
					this.SendPropertyChanging();
					this._RollNO = value;
					this.SendPropertyChanged("RollNO");
					this.OnRollNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentAttendence")]
	public partial class StudentAttendence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _SubjectId;
		
		private string _RollNo;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnRollNoChanging(string value);
    partial void OnRollNoChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public StudentAttendence()
		{
			this._Class = default(EntityRef<Class>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNo", DbType="VarChar(20)")]
		public string RollNo
		{
			get
			{
				return this._RollNo;
			}
			set
			{
				if ((this._RollNo != value))
				{
					this.OnRollNoChanging(value);
					this.SendPropertyChanging();
					this._RollNo = value;
					this.SendPropertyChanged("RollNo");
					this.OnRollNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_StudentAttendence", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.StudentAttendences.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.StudentAttendences.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentAttendence", Storage="_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.StudentAttendences.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.StudentAttendences.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectId;
		
		private System.Nullable<int> _ClassId;
		
		private string _SubjectName;
		
		private EntitySet<Exam> _Exams;
		
		private EntitySet<Expense> _Expenses;
		
		private EntitySet<StudentAttendence> _StudentAttendences;
		
		private EntitySet<TeacherSubject> _TeacherSubjects;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public Subject()
		{
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			this._Expenses = new EntitySet<Expense>(new Action<Expense>(this.attach_Expenses), new Action<Expense>(this.detach_Expenses));
			this._StudentAttendences = new EntitySet<StudentAttendence>(new Action<StudentAttendence>(this.attach_StudentAttendences), new Action<StudentAttendence>(this.detach_StudentAttendences));
			this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="VarChar(50)")]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Exam", Storage="_Exams", ThisKey="SubjectId", OtherKey="SubjectID")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Expense", Storage="_Expenses", ThisKey="SubjectId", OtherKey="SubjectID")]
		public EntitySet<Expense> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentAttendence", Storage="_StudentAttendences", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<StudentAttendence> StudentAttendences
		{
			get
			{
				return this._StudentAttendences;
			}
			set
			{
				this._StudentAttendences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_TeacherSubject", Storage="_TeacherSubjects", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<TeacherSubject> TeacherSubjects
		{
			get
			{
				return this._TeacherSubjects;
			}
			set
			{
				this._TeacherSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Subject", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_StudentAttendences(StudentAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_StudentAttendences(StudentAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Gender;
		
		private System.Nullable<long> _Mobile;
		
		private string _Email;
		
		private string _Address;
		
		private string _Password;
		
		private EntitySet<TeacherAttendence> _TeacherAttendences;
		
		private EntitySet<TeacherSubject> _TeacherSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnMobileChanging(System.Nullable<long> value);
    partial void OnMobileChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Teacher()
		{
			this._TeacherAttendences = new EntitySet<TeacherAttendence>(new Action<TeacherAttendence>(this.attach_TeacherAttendences), new Action<TeacherAttendence>(this.detach_TeacherAttendences));
			this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="BigInt")]
		public System.Nullable<long> Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherAttendence", Storage="_TeacherAttendences", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<TeacherAttendence> TeacherAttendences
		{
			get
			{
				return this._TeacherAttendences;
			}
			set
			{
				this._TeacherAttendences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherSubject", Storage="_TeacherSubjects", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<TeacherSubject> TeacherSubjects
		{
			get
			{
				return this._TeacherSubjects;
			}
			set
			{
				this._TeacherSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeacherAttendences(TeacherAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_TeacherAttendences(TeacherAttendence entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_TeacherSubjects(TeacherSubject entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherAttendence")]
	public partial class TeacherAttendence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public TeacherAttendence()
		{
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherAttendence", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.TeacherAttendences.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.TeacherAttendences.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherSubject")]
	public partial class TeacherSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ClassId;
		
		private System.Nullable<int> _SubjectId;
		
		private System.Nullable<int> _TeacherId;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassIdChanging(System.Nullable<int> value);
    partial void OnClassIdChanged();
    partial void OnSubjectIdChanging(System.Nullable<int> value);
    partial void OnSubjectIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    #endregion
		
		public TeacherSubject()
		{
			this._Class = default(EntityRef<Class>);
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int")]
		public System.Nullable<int> ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int")]
		public System.Nullable<int> SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherSubject", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.TeacherSubjects.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.TeacherSubjects.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_TeacherSubject", Storage="_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.TeacherSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.TeacherSubjects.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherSubject", Storage="_Teacher", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.TeacherSubjects.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.TeacherSubjects.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
